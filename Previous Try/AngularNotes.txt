---------------------------FORMS--------------
There are 2 approaches for dealing with forms in Angular
1 is the template driven approach, where the form controls are created in HTML and accessed via Angular constructs and the second is the reactive approach, where the form controls are created in angular code.
Template Drive Approach
In Angular, the form control should not be submitted to the server in the real sense, as a form refresh clears off all data. Hence, the <form> tag should use the ngSubmit directive like ngSubmit="onSubmit()", where onSubmit will be the method in the ts which handles the form submission.

Every form control should be associated with an ngModel attribute. If we want to refer to the control directly in code, we need to then specify something like #email="ngModel" to use things like email.value in the backend ts. We can also use things like email.valid in the frontend html.
If we need to refer to more than 1 control as a group, use the ngGroup attribute. We would need to specify a string like ngGroup="UserData". This string is unique to the html, but not used as a variable in the ts. For that, use #userData = "ngGroup", and use userData as the backend variable

If we need a default value to be populated, we can set [ngModel]=<default_value_var_in_ts>
If we need to know the vaue immediately, we can use 2 way binding with [(ngModel)]=<ts_variable> 
this.signupForm.setValue({entire form object}): sets to value for all controls of the form
this.signupForm.form.patchValue({just the form object we wish to change}): sets the value for only the listed form controls
We can extract the data from the form by using the form object.value.<item name>
