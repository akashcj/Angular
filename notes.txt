10 Jun 2018
------------
ngModel is part of the FormsModule which can be imported from '@angular/forms';

angular.json needs to have the styles section updated with the bootstrap styling

11 Jun 2018
-------------
The index.html file in the angular project is the single page served by Angular
In the default index.html, there is a section called <app-root></app-root>. This is a default component which is served by Angular. This component is substituted with the code in the app.component.html file, which would be using the app.component.ts and other files.

In the browser, Angular injects some script files which contains the code we write. 
The first file which is executed is main.ts, where the initial module is loaded or bootstrapped --> The line is platformBrowserDynamic().bootstrapModule(AppModule).
So, the AppModule is loaded from app.module.ts, where again, it bootstraps the AppComponent --> bootstrap: [AppComponent].
Now, Angular loads the AppComponent from app.component.ts, where it sees a "selector" defined as "app-root". This is how Angular understands what <app-root> is in the index.html file, and replaces it with whatever code we have written for that to resolve to.

14 Jun 2018
___________
COMPONENTS -- Initial Primer

This is basically a markup along with a chunk of functionality

First, create a folder for all the files for the component. e.g. for a component called server, we can have a folder named 'server'.
Now, we need to create a .ts file which exports the class which should implement the functionality provided by our component
i.e. 

export class ServerComponent{
    
}

Second, declare the class is a component using an @Component decorator
@Component(
{
    selector:'app-server',
    templateUrl: './server.component.html'
})
This decorator should contain a selector, which is the html used to create this component in the markup -- in the above case <app-server></app-server>. However, these may also be of the form '[app-server]', or of the form '.app-server', in which case, they will have to be attributes of an element [e.g <div app-server></div>], or a css class of an element [e.g. <div class="app-server"></div>] to have the same effect. However, the element selector is the most used.

Third, create a file called ./server.component.html, and put the markup which needs to be displayed when the component is invoked

Fourth, add the component to the app.module.ts, in it @NgModule decorator, under the declarations section. It would require importing the component from the component name.

Finally, add a tag with the selector defined in the component to a markup file, e.g. app.component.html, like <app-server></app-server>

Now, invoking the webpage displayed, we see the markup defined in the templateUrl, in place of the selector tags.

COMPONENTS -- Creating using the @angular cli
_____________________________________________
ng generate component servers 
This will create a component called 'servers' inside a 'servers' folder in our 'app' folder

15 Jun 2018
______________

DATA BINDING
______________

Data Output -- 
string interpolation : {{<expression, which is mostly a variable from ts>}}
Property Binding: [<some property>] = "<expression to set the value of the property>" e.g. < button [disabled]="!allowAction">Add Server</button>

Data Input --
Event Binding: (<event name>)="<typescript expression on event invocation>" e.g. <button (click)="doSomething()">Do It!</button>

if you need to use the data which is passed automatically to the event, use the $event special variable, like <button (click) = "doSemething($event)>Do It!</button>

2 way data binding --
use the syntax [(<property>)]="<value of backend property>". e.g. <input type="text" [(ngModel)]="serverData">
This will update the text in the input box, if we change the value of the "serverData" variable in the backend.

________________

ngIf Directive
________________

This is a structural directive, and is used inside an HTML element as an attribute. if the condition is true, the element is displayed, else not.
structural directives are used with an '*' in front of it. 
e.g. <p *ngIf="isValidData">{{data}}</p>

if we have an else condition, we can define an ng-template area with a marker and link the else condition of the ngIf to that marker
e.g. 
<p *ngIf="serverCreated;else noServer> Server {{ServerName}} has been created </p>
<ng-template #noServer>
    <p>No Server has been created yet</p>
</ng-template>

__________________________

ngStyle Directive
___________________________

This is an attribute directive, and is used like [ngStyle]="{backgroundColor:'red'}". The property backgroundColor of the element is set to red. We can set the property based on a property, by calling a method, instead of passing 'red' always. So, the code would look like
[ngStyle]="{backgroundColor:getColor()}"

we can also have a small code snippet instead of calling a funciton like
[ngStyle] = "backgroundColor:i > 4?'red':'blue'"

we can also use the javascript property for background color, in which case it would have to be in quotes. The above code would then be
[ngStyle] = "{'background-color':getColor()}" 

______________________________
ngClass
______________________________
An attribute directive which can be used to dynamically assign a class to an element, if a condition is true
It takes the form of [ngClass]="{<class_name>:<condition>}". e.g. [ngClass]="{online:serverStatus==='online'}"

______________________________
ngFor
______________________________
A built in directive which repeats an HTML element based on how many items are there in an array
syntax: *ngFor="let <local_variable> of <back_end_array_name>".
e.g.: <appServer *ngFor="let server of servers"></appServer>
In the above example, the <appServer> tag is repeated once for every item in the "servers" array. The local variable which can be used in the ngFor is called "server".

If we need the index of the current iteration, we can use a slightly modified syntax like below
syntax:*ngFor="let <loop_variable> of <array>; let <local_index_variable> = index"
e.g.: <p *ngFor = "let server of servers; let i = index"> {{i}} -- {{server}} </p>








